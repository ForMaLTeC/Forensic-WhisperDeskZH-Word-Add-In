name: Build and Publish VSTO Add-in

on:
  push:
    branches: [ main, develop, PipelineSetup ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  SOLUTION_PATH: './ForensicWhisperDeskZH.sln'
  PROJECT_PATH: './ForensicWhisperDeskZH/ForensicWhisperDeskZH.csproj'
  MODEL_DOWNLOADER_PATH: './ModelDownloader/ModelDownloader.csproj'
  BUILD_CONFIGURATION: 'Release'
  BUILD_PLATFORM: 'Any CPU'
  PUBLISH_URL: 'https://your-domain.com/vsto/'
  APPLICATION_NAME: 'ForensicWhisperDeskZH'
  # Define which models to download for production
  WHISPER_MODELS: 'base,large'

jobs:
  build-model-download:
    runs-on: windows-latest
    
    permissions:
        contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: '5.x'
        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.15
      
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
        
    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'
      
    - name: Restore packages for ModelDownloader
      run: dotnet restore ${{ env.MODEL_DOWNLOADER_PATH }}
      
    # Build and run ModelDownloader before main build
    - name: Build ModelDownloader (without signing)
      run: dotnet build ${{ env.MODEL_DOWNLOADER_PATH }} --configuration Release --no-restore /p:SignAssembly=false /p:SignManifests=false
      
    - name: Download Whisper Models using ModelDownloader
  
      run: |
        Write-Host "=== Starting Whisper Model Download Process ==="
        
        # Create Models directory in the main project
        $modelsDir = "ForensicWhisperDeskZH\Models"
        New-Item -ItemType Directory -Force -Path $modelsDir
        Write-Host "Created models directory: $modelsDir"
        
        # Parse the models from environment variable - keep as comma-separated
        $modelsString = "${{ env.WHISPER_MODELS }}"
        Write-Host "Models to download: $modelsString"
        
        try {
          # Run the ModelDownloader
          $downloaderPath = "ModelDownloader\bin\Release\net8.0\ModelDownloader.exe"
          
          if (Test-Path $downloaderPath) {
            Write-Host "Running ModelDownloader..."
            # Pass the comma-separated string directly to --models
            & $downloaderPath --models $modelsString --target $modelsDir
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "ModelDownloader completed successfully"
            } else {
              throw "ModelDownloader failed with exit code $LASTEXITCODE"
            }
          } else {
            throw "ModelDownloader executable not found at $downloaderPath"
          }
        } catch {
          Write-Host "ModelDownloader failed: $($_.Exception.Message)"
          Write-Host "Falling back to direct download method..."
          
          # Fallback to direct download
          $models = "${{ env.WHISPER_MODELS }}" -split ","
          $baseUrl = "https://huggingface.co/sandrohanea/whisper.net/resolve/v3/classic"
          
          foreach ($model in $models) {
            $model = $model.Trim()
            $fileName = "ggml-$model.bin"
            $filePath = "$modelsDir\$fileName"
            $downloadUrl = "$baseUrl/$fileName"
            
            if (Test-Path $filePath) {
              $fileSize = (Get-Item $filePath).Length / 1MB
              Write-Host "Model $model already exists ($([math]::Round($fileSize, 1)) MB) - skipping"
              continue
            }
            
            Write-Host "⬇️  Downloading $model model from $downloadUrl..."
            try {
              Invoke-WebRequest -Uri $downloadUrl -OutFile $filePath -UseBasicParsing
              $fileSize = (Get-Item $filePath).Length / 1MB
              Write-Host "Successfully downloaded $model model ($([math]::Round($fileSize, 1)) MB)"
            } catch {
              Write-Host "Failed to download $model model: $($_.Exception.Message)"
              exit 1
            }
          }
        }
        
        # Verify downloaded models
        Write-Host "Verifying downloaded models:"
        if (Test-Path $modelsDir) {
          Get-ChildItem -Path $modelsDir -Filter "*.bin" | ForEach-Object {
            $sizeInMB = $_.Length / 1MB
            Write-Host "    $($_.Name) - $([math]::Round($sizeInMB, 1)) MB"
          }
        }
        
        Write-Host "Whisper model download process completed successfully!"

    
    # Install Code Signing Certificate
    - name: Install Code Signing Certificate
      if: github.event_name != 'pull_request'
      run: |
        # Decode certificate from base64
        $certBytes = [System.Convert]::FromBase64String("${{ secrets.SIGNING_CERTIFICATE }}")
        $certPath = "$env:TEMP\ForensicWhisperDeskZH.pfx"
        [System.IO.File]::WriteAllBytes($certPath, $certBytes)
        
        # Import certificate to Personal store
        $securePassword = ConvertTo-SecureString "${{ secrets.CERTIFICATE_PASSWORD }}" -AsPlainText -Force
        Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $securePassword
        
        # Clean up certificate file
        Remove-Item $certPath -Force
        
        Write-Host "Certificate installed successfully"

    - name: Restore NuGet packages for solution
      run: nuget restore ${{ env.SOLUTION_PATH }}

    - name: Build Word Add-In
      run: msbuild ${{ env.SOLUTION_PATH }} /t:publish /p:Configuration=Release /p:PublishDir=.\publish\ /p:PublishUrl=.\publish\

          # Debug step to find the actual output paths
    - name: List build output directories
      run: |
        Write-Host "=== Build Output Investigation ==="
        
        # List all directories that might contain build outputs
        $searchPaths = @(
          "ForensicWhisperDeskZH\bin\Release",
          "ForensicWhisperDeskZH\bin",
          "ForensicWhisperDeskZH\publish",
          "bin\Release",
          "publish"
        )
        
        foreach ($path in $searchPaths) {
          if (Test-Path $path) {
            Write-Host "📁 Found directory: $path"
            Get-ChildItem -Path $path -Recurse | ForEach-Object {
              $relativePath = $_.FullName.Substring((Get-Location).Path.Length + 1)
              $size = if ($_.PSIsContainer) { "DIR" } else { "$([math]::Round($_.Length / 1KB, 1)) KB" }
              Write-Host "    $relativePath - $size"
            }
            Write-Host ""
          } else {
            Write-Host "❌ Directory not found: $path"
          }
        }
        
        # Look for common VSTO output files
        Write-Host "=== Searching for VSTO files ==="
        Get-ChildItem -Recurse -Include "*.dll", "*.manifest", "*.vsto", "*.deploy" | ForEach-Object {
          $relativePath = $_.FullName.Substring((Get-Location).Path.Length + 1)
          $size = "$([math]::Round($_.Length / 1KB, 1)) KB"
          Write-Host "📄 $relativePath - $size"
        }


    - name: Upload published artifacts
      uses: actions/upload-artifact@v4
      with:
        name: VSTO-Addin-Package-${{ github.ref_name || github.sha }}
        path: ForensicWhisperDeskZH\publish
      id: upload_artifact

    - name: Download Artifact for Release

      uses: actions/download-artifact@v4
      with:
        name: VSTO-Addin-Package-${{ github.ref_name }}
        path: ./release-artifacts

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## ForensicWhisperDeskZH Release ${{ github.ref_name }}
          
          ### Features
          - VSTO Add-in for Microsoft Word
          - Whisper-based transcription capabilities
          - Version: ${{ steps.gitversion.outputs.semVer }}
          
          ### Installation Options
          
          **Quick Install (Recommended):**
          - Download `ForensicWhisperDeskZH-${{ github.ref_name }}.vsto`
          - Double-click to install directly
          
          **Complete Package:**
          - Download `VSTO-Addin-Package-${{ github.ref_name }}.zip`
          - Contains all files including Whisper models and deployment files
          
          ### System Requirements
          - Microsoft Word 2016 or later
          - .NET Framework 4.8
          - Windows 10 or later
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
      id: create_release

    - name: Upload VSTO File

      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/ForensicWhisperDeskZH.vsto
        asset_name: ForensicWhisperDeskZH-${{ github.ref_name }}.vsto
        asset_content_type: application/vsto

    - name: Create ZIP from Artifact Contents

      run: |
        Write-Host "Creating ZIP from artifact contents..."
        $zipName = "VSTO-Addin-Package-${{ github.ref_name }}.zip"
        
        # Use 7-Zip if available (handles large files better), otherwise fall back to PowerShell
        if (Get-Command "7z" -ErrorAction SilentlyContinue) {
          Write-Host "Using 7-Zip for compression..."
          & 7z a -tzip $zipName ".\release-artifacts\*" -r
        } else {
          Write-Host "Using PowerShell compression..."
          # Create smaller chunks if needed
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory((Resolve-Path ".\release-artifacts"), $zipName)
        }
        
        if (Test-Path $zipName) {
          $size = [math]::Round((Get-Item $zipName).Length / 1MB, 2)
          Write-Host "✅ Created $zipName ($size MB)"
        } else {
          Write-Error "❌ Failed to create ZIP file"
          exit 1
        }

    - name: Upload Complete Package

      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: VSTO-Addin-Package-${{ github.ref_name }}.zip
        asset_name: VSTO-Addin-Package-${{ github.ref_name }}.zip
        asset_content_type: application/zip
