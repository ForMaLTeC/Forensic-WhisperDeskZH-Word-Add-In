name: Build and Publish VSTO Add-in

on:
  push:
    branches: [ main, develop, PipelineSetup ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  SOLUTION_PATH: './ForensicWhisperDeskZH.sln'
  PROJECT_PATH: './ForensicWhisperDeskZH/ForensicWhisperDeskZH.csproj'
  BUILD_CONFIGURATION: 'Release'
  BUILD_PLATFORM: 'Any CPU'
  PUBLISH_URL: 'https://your-domain.com/vsto/'
  APPLICATION_NAME: 'ForensicWhisperDeskZH'
  # Define which models to download for production
  WHISPER_MODELS: 'base,large'

jobs:
  build-and-publish:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: '5.x'
        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.15
      
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'
        
    - name: Restore NuGet packages
      run: nuget restore ${{ env.SOLUTION_PATH }}
      
    # NEW: Download Whisper Models for Build
    - name: Download Whisper Models
      run: |
        Write-Host "Starting Whisper model download process..."
        
        # Create Models directory in the project
        $modelsDir = "ForensicWhisperDeskZH\Models"
        New-Item -ItemType Directory -Force -Path $modelsDir
        Write-Host "Created models directory: $modelsDir"
        
        # Parse the models from environment variable
        $models = "${{ env.WHISPER_MODELS }}" -split ","
        Write-Host "Models to download: $($models -join ', ')"
        
        # Download each model using direct HTTP download
        $baseUrl = "https://huggingface.co/sandrohanea/whisper.net/resolve/v3/classic/"
        
        foreach ($model in $models) {
          $model = $model.Trim()
          $fileName = "ggml-$model.bin"
          $filePath = "$modelsDir\$fileName"
          $downloadUrl = "$baseUrl/$fileName"
          
          Write-Host "Checking if $fileName already exists..."
          if (Test-Path $filePath) {
            $fileSize = (Get-Item $filePath).Length / 1MB
            Write-Host "Model $model already exists ($([math]::Round($fileSize, 1)) MB) - skipping download"
            continue
          }
          
          Write-Host "Downloading $model model from $downloadUrl..."
          try {
            # Download with progress indication
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile($downloadUrl, $filePath)
            
            # Verify download
            if (Test-Path $filePath) {
              $fileSize = (Get-Item $filePath).Length / 1MB
              Write-Host "Successfully downloaded $model model ($([math]::Round($fileSize, 1)) MB)"
            } else {
              throw "File was not created after download"
            }
          } catch {
            Write-Host "Failed to download $model model: $($_.Exception.Message)"
            Write-Host "Attempting alternative download method..."
            
            # Fallback: Use Invoke-WebRequest
            try {
              Invoke-WebRequest -Uri $downloadUrl -OutFile $filePath -UseBasicParsing
              $fileSize = (Get-Item $filePath).Length / 1MB
              Write-Host "Successfully downloaded $model model using fallback method ($([math]::Round($fileSize, 1)) MB)"
            } catch {
              Write-Host "Critical error: Failed to download $model model using both methods"
              Write-Host "Error: $($_.Exception.Message)"
              exit 1
            }
          }
        }
        
        # List downloaded models for verification
        Write-Host "Verifying downloaded models:"
        if (Test-Path $modelsDir) {
          Get-ChildItem -Path $modelsDir -Filter "*.bin" | ForEach-Object {
            $sizeInMB = $_.Length / 1MB
            Write-Host "  $($_.Name) - $([math]::Round($sizeInMB, 1)) MB"
          }
        }
        
        Write-Host "Whisper model download process completed successfully!"
        
    - name: Setup Certificate for Signing
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      env:
        CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      run: |
        if ($env:CERTIFICATE_BASE64) {
          $certBytes = [Convert]::FromBase64String($env:CERTIFICATE_BASE64)
          [IO.File]::WriteAllBytes("$env:GITHUB_WORKSPACE\certificate.pfx", $certBytes)
          echo "CERT_PATH=$env:GITHUB_WORKSPACE\certificate.pfx" >> $env:GITHUB_ENV
          echo "Certificate prepared for signing"
        } else {
          echo "No certificate provided - will create self-signed certificate"
        }
        
    - name: Create Self-Signed Certificate (for testing)
      if: env.CERT_PATH == '' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
      run: |
        $cert = New-SelfSignedCertificate -Subject "CN=ForensicWhisperDeskZH" -CertStoreLocation "Cert:\CurrentUser\My" -KeyUsage DigitalSignature -Type CodeSigning
        $certPath = "$env:GITHUB_WORKSPACE\selfsigned.pfx"
        $password = ConvertTo-SecureString "password" -AsPlainText -Force
        Export-PfxCertificate -Cert $cert -FilePath $certPath -Password $password
        echo "CERT_PATH=$certPath" >> $env:GITHUB_ENV
        echo "CERT_PASSWORD=password" >> $env:GITHUB_ENV
        echo "Self-signed certificate created"
      
    - name: Update Assembly Version
      run: |
        $version = "${{ steps.gitversion.outputs.assemblySemVer }}"
        $fileVersion = "${{ steps.gitversion.outputs.assemblySemFileVer }}"
        
        $assemblyInfo = "ForensicWhisperDeskZH\Properties\AssemblyInfo.cs"
        if (Test-Path $assemblyInfo) {
          (Get-Content $assemblyInfo) -replace 'AssemblyVersion\(".*"\)', "AssemblyVersion(`"$version`")" | Set-Content $assemblyInfo
          (Get-Content $assemblyInfo) -replace 'AssemblyFileVersion\(".*"\)', "AssemblyFileVersion(`"$fileVersion`")" | Set-Content $assemblyInfo
          echo "Updated version to $version"
        }
        
    - name: Build Solution
      run: |
        msbuild ${{ env.SOLUTION_PATH }} `
          /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
          /p:Platform="${{ env.BUILD_PLATFORM }}" `
          /p:PublishUrl="${{ env.PUBLISH_URL }}" `
          /p:InstallUrl="${{ env.PUBLISH_URL }}" `
          /p:ApplicationVersion="${{ steps.gitversion.outputs.assemblySemVer }}" `
          /p:PublishWizardShown=false `
          /p:PublishWizardCompleted=true `
          /p:IsWebBootstrapper=true `
          /p:BootstrapperEnabled=true `
          /p:UpdateEnabled=true `
          /p:UpdateMode=Foreground `
          /p:UpdateInterval=7 `
          /p:UpdateIntervalUnits=days `
          /p:UpdateRequired=false `
          /p:MapFileExtensions=true `
          /p:ApplicationRevision=0 `
          /p:UseApplicationTrust=false `
          /p:CreateDesktopShortcut=true `
          /p:ExcludeDeploymentUrl=false `
          /verbosity:normal
          
    - name: Include Additional Files
      run: |
        $outputDir = "ForensicWhisperDeskZH\bin\${{ env.BUILD_CONFIGURATION }}"
        
        # Copy Keywords.xml
        if (Test-Path "ForensicWhisperDeskZH\Keywords.xml") {
          Copy-Item "ForensicWhisperDeskZH\Keywords.xml" "$outputDir\" -Force
          Write-Host "Copied Keywords.xml to output directory"
        }
        
        # Copy downloaded Whisper models
        $sourceModelsDir = "ForensicWhisperDeskZH\Models"
        if (Test-Path $sourceModelsDir) {
          $targetModelsDir = "$outputDir\Models"
          New-Item -ItemType Directory -Force -Path $targetModelsDir
          
          Get-ChildItem -Path $sourceModelsDir -Filter "*.bin" | ForEach-Object {
            Copy-Item $_.FullName $targetModelsDir -Force
            $sizeInMB = $_.Length / 1MB
            Write-Host "Copied $($_.Name) ($([math]::Round($sizeInMB, 1)) MB) to output directory"
          }
        }
        
        # Copy Whisper.net runtime dependencies
        $runtimesPath = "packages\Whisper.net.*\runtimes"
        if (Test-Path $runtimesPath) {
          Copy-Item $runtimesPath "$outputDir\" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Copied Whisper.net runtime dependencies"
        }
        
    - name: Publish VSTO Application
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
      run: |
        $publishDir = "publish"
        New-Item -ItemType Directory -Force -Path $publishDir
        
        msbuild ${{ env.PROJECT_PATH }} `
          /target:Publish `
          /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
          /p:Platform="${{ env.BUILD_PLATFORM }}" `
          /p:PublishUrl="${{ env.PUBLISH_URL }}" `
          /p:ApplicationVersion="${{ steps.gitversion.outputs.assemblySemVer }}" `
          /p:PublishDir="$publishDir\" `
          /verbosity:normal
          
    - name: Sign Application Files
      if: env.CERT_PATH != '' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
      run: |
        $certPath = $env:CERT_PATH
        $certPassword = if ($env:CERT_PASSWORD) { $env:CERT_PASSWORD } else { "${{ secrets.CERTIFICATE_PASSWORD }}" }
        
        $filesToSign = Get-ChildItem -Path "publish" -Include "*.exe", "*.dll", "*.vsto" -Recurse
        
        foreach ($file in $filesToSign) {
          try {
            & signtool sign /f "$certPath" /p "$certPassword" /t "http://timestamp.digicert.com" "$($file.FullName)"
            echo "Signed: $($file.Name)"
          } catch {
            echo "Failed to sign: $($file.Name) - $($_.Exception.Message)"
          }
        }
        
    - name: Update Application Manifest
      if: env.CERT_PATH != '' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
      run: |
        $certPath = $env:CERT_PATH
        $certPassword = if ($env:CERT_PASSWORD) { $env:CERT_PASSWORD } else { "${{ secrets.CERTIFICATE_PASSWORD }}" }
        
        $manifests = Get-ChildItem -Path "publish" -Include "*.manifest", "*.application" -Recurse
        
        foreach ($manifest in $manifests) {
          try {
            $mageExe = "${env:ProgramFiles(x86)}\Microsoft SDKs\ClickOnce\SignTool\mage.exe"
            if (Test-Path $mageExe) {
              & $mageExe -Sign "$($manifest.FullName)" -CertFile "$certPath" -Password "$certPassword"
              echo "Signed manifest: $($manifest.Name)"
            } else {
              echo "Mage.exe not found, skipping manifest signing"
            }
          } catch {
            echo "Failed to sign manifest: $($manifest.Name) - $($_.Exception.Message)"
          }
        }
        
    - name: Create Deployment Package
      run: |
        $version = "${{ steps.gitversion.outputs.semVer }}"
        $packageName = "${{ env.APPLICATION_NAME }}-v$version"
        
        New-Item -ItemType Directory -Force -Path "deployment"
        
        if (Test-Path "publish") {
          Copy-Item "publish\*" "deployment\" -Recurse -Force
        }
        
        $buildOutput = "ForensicWhisperDeskZH\bin\${{ env.BUILD_CONFIGURATION }}"
        if (Test-Path $buildOutput) {
          Copy-Item "$buildOutput\*" "deployment\bin\" -Recurse -Force
        }
        
        # Verify models are included in deployment
        $deploymentModels = "deployment\bin\Models"
        if (Test-Path $deploymentModels) {
          Write-Host "Models included in deployment:"
          Get-ChildItem -Path $deploymentModels -Filter "*.bin" | ForEach-Object {
            $sizeInMB = $_.Length / 1MB
            Write-Host "  $($_.Name) - $([math]::Round($sizeInMB, 1)) MB"
          }
        }
        
        $setupScript = @'
        @echo off
        echo Installing ForensicWhisperDeskZH VSTO Add-in...
        echo.
        echo This will install the Microsoft Word add-in for transcription.
        echo Please ensure Microsoft Word is closed before continuing.
        echo.
        pause
        echo.
        echo Installing...
        if exist "ForensicWhisperDeskZH.vsto" (
            start /wait ForensicWhisperDeskZH.vsto
            echo Installation completed!
        ) else (
            echo Error: Installation file not found!
            echo Please ensure ForensicWhisperDeskZH.vsto is in the same directory.
        )
        pause
        '@
        $setupScript | Out-File -FilePath "deployment\Install.bat" -Encoding ASCII
        
        $readme = @"
        # ForensicWhisperDeskZH VSTO Add-in v$version

        ## Installation Instructions

        1. Ensure Microsoft Word is closed
        2. Run Install.bat as Administrator
        3. Follow the installation prompts
        4. Open Microsoft Word - the add-in should appear in the ribbon

        ## Requirements

        - Microsoft Word 2016 or later
        - .NET Framework 4.8
        - Windows 10 or later

        ## Files Included

        - ForensicWhisperDeskZH.vsto - Main installation file
        - Application files and dependencies
        - Keywords.xml - Configuration file for text processing
        - Models/ - Whisper AI models for transcription (${{ env.WHISPER_MODELS }} models included)

        ## Version Information

        Version: $version
        Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
        Commit: ${{ github.sha }}
        Models: ${{ env.WHISPER_MODELS }}
        "@
        $readme | Out-File -FilePath "deployment\README.md" -Encoding UTF8
        
        Compress-Archive -Path "deployment\*" -DestinationPath "$packageName.zip" -Force
        echo "PACKAGE_NAME=$packageName" >> $env:GITHUB_ENV
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vsto-build-${{ github.run_number }}
        path: |
          ForensicWhisperDeskZH/bin/${{ env.BUILD_CONFIGURATION }}/**
          publish/**
        retention-days: 30
        
    - name: Upload Deployment Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip
        retention-days: 90
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.PACKAGE_NAME }}.zip
        body: |
          ## ForensicWhisperDeskZH VSTO Add-in Release
          
          **Version:** ${{ steps.gitversion.outputs.semVer }}
          **Build Date:** ${{ steps.gitversion.outputs.commitDate }}
          
          ### Installation
          
          1. Download the deployment package
          2. Extract the zip file
          3. Run `Install.bat` as Administrator
          4. Follow the installation prompts
          
          ### Included Models
          
          This release includes the following Whisper models: ${{ env.WHISPER_MODELS }}
          
          ### Changes
          
          See the commit history for detailed changes in this release.
          
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}