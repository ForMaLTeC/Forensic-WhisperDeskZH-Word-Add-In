name: Build and Publish VSTO Add-in

on:
  push:
    branches: [ main, develop, PipelineSetup ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  SOLUTION_PATH: './ForensicWhisperDeskZH.sln'
  PROJECT_PATH: './ForensicWhisperDeskZH/ForensicWhisperDeskZH.csproj'
  MODEL_DOWNLOADER_PATH: './ModelDownloader/ModelDownloader.csproj'
  BUILD_CONFIGURATION: 'Release'
  BUILD_PLATFORM: 'Any CPU'
  PUBLISH_URL: 'https://your-domain.com/vsto/'
  APPLICATION_NAME: 'ForensicWhisperDeskZH'
  # Define which models to download for production
  WHISPER_MODELS: 'base,large'

jobs:
  build-model-download:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: '5.x'
        
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.15
      
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
        
    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'
      
    - name: Restore packages for ModelDownloader
      run: dotnet restore ${{ env.MODEL_DOWNLOADER_PATH }}
      
    # Build and run ModelDownloader before main build
    - name: Build ModelDownloader (without signing)
      run: dotnet build ${{ env.MODEL_DOWNLOADER_PATH }} --configuration Release --no-restore /p:SignAssembly=false /p:SignManifests=false
      
    - name: Download Whisper Models using ModelDownloader
      run: |
        Write-Host "=== Starting Whisper Model Download Process ==="
        
        # Create Models directory in the main project
        $modelsDir = "ForensicWhisperDeskZH\Models"
        New-Item -ItemType Directory -Force -Path $modelsDir
        Write-Host "Created models directory: $modelsDir"
        
        # Parse the models from environment variable - keep as comma-separated
        $modelsString = "${{ env.WHISPER_MODELS }}"
        Write-Host "Models to download: $modelsString"
        
        try {
          # Run the ModelDownloader
          $downloaderPath = "ModelDownloader\bin\Release\net8.0\ModelDownloader.exe"
          
          if (Test-Path $downloaderPath) {
            Write-Host "Running ModelDownloader..."
            # Pass the comma-separated string directly to --models
            & $downloaderPath --models $modelsString --target $modelsDir
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "ModelDownloader completed successfully"
            } else {
              throw "ModelDownloader failed with exit code $LASTEXITCODE"
            }
          } else {
            throw "ModelDownloader executable not found at $downloaderPath"
          }
        } catch {
          Write-Host "ModelDownloader failed: $($_.Exception.Message)"
          Write-Host "Falling back to direct download method..."
          
          # Fallback to direct download
          $models = "${{ env.WHISPER_MODELS }}" -split ","
          $baseUrl = "https://huggingface.co/sandrohanea/whisper.net/resolve/v3/classic"
          
          foreach ($model in $models) {
            $model = $model.Trim()
            $fileName = "ggml-$model.bin"
            $filePath = "$modelsDir\$fileName"
            $downloadUrl = "$baseUrl/$fileName"
            
            if (Test-Path $filePath) {
              $fileSize = (Get-Item $filePath).Length / 1MB
              Write-Host "Model $model already exists ($([math]::Round($fileSize, 1)) MB) - skipping"
              continue
            }
            
            Write-Host "⬇️  Downloading $model model from $downloadUrl..."
            try {
              Invoke-WebRequest -Uri $downloadUrl -OutFile $filePath -UseBasicParsing
              $fileSize = (Get-Item $filePath).Length / 1MB
              Write-Host "Successfully downloaded $model model ($([math]::Round($fileSize, 1)) MB)"
            } catch {
              Write-Host "Failed to download $model model: $($_.Exception.Message)"
              exit 1
            }
          }
        }
        
        # Verify downloaded models
        Write-Host "Verifying downloaded models:"
        if (Test-Path $modelsDir) {
          Get-ChildItem -Path $modelsDir -Filter "*.bin" | ForEach-Object {
            $sizeInMB = $_.Length / 1MB
            Write-Host "    $($_.Name) - $([math]::Round($sizeInMB, 1)) MB"
          }
        }
        
        Write-Host "Whisper model download process completed successfully!"

    - name: Build Word Add-In
      run: msbuild ${{ env.SOLUTION_PATH }} /p:Configuration=Release


    
        
